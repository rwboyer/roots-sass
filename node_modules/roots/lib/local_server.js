// Generated by CoffeeScript 1.10.0
(function() {
  var Server, _, browsersync, charge, path, serve_static;

  path = require('path');

  serve_static = require('serve-static');

  charge = require('charge');

  browsersync = require('browser-sync');

  _ = require('lodash');


  /**
   * @class Server
   * @classdesc Serves up a roots project locally, handles live reloading
   */

  Server = (function() {

    /**
     * Creates a new instance of the server
     *
     * @param  {Function} roots - roots class instance
     * @param  {String} dir - directory to serve
     */
    function Server(project) {
      this.project = project;
      this.bs = browsersync.create();
    }


    /**
     * Start the local server on the given port.
     *
     * @param  {Integer} port - number of port to start the server on
     * @return {Promise} promise for the server object
     */

    Server.prototype.start = function(port, cb) {
      var bs_options, middlewares, opts;
      bs_options = {
        port: port,
        logLevel: 'silent',
        notify: false,
        open: this.project.config.open_browser,
        server: {
          baseDir: this.project.config.output_path()
        }
      };
      if (this.project.config.browser) {
        _.merge(bs_options, this.project.config.browser);
      }
      opts = this.project.config.server || {};
      middlewares = [];
      if (opts.clean_urls) {
        middlewares.push(charge.hygienist(this.project.config.output_path(), opts.clean_urls));
      }
      if (opts.exclude) {
        middlewares.push(charge.escapist(opts.exclude));
      }
      if (opts.auth) {
        middlewares.push(charge.publicist(opts.auth));
      }
      if (opts.cache_control) {
        middlewares.push(charge.archivist(opts.cache_control));
      }
      if (opts.gzip) {
        middlewares.push(charge.minimist(opts.gzip));
      }
      if (opts.log) {
        middlewares.push(charge.columnist(opts.log));
      }
      if (opts.error_page) {
        middlewares.push(charge.apologist(opts.error_page));
      }
      bs_options.server.middleware = middlewares;
      return this.bs.init(bs_options, cb);
    };


    /**
     * Close the server and remove it.
     */

    Server.prototype.stop = function(cb) {
      this.bs.exit();
      return cb();
    };


    /**
     * Reload the browser
     */

    Server.prototype.reload = function() {
      return this.bs.reload();
    };


    /**
     * Inject loading spinner while compiling
     */

    Server.prototype.compiling = function() {
      return this.bs.notify('compiling...', 999999);
    };


    /**
     * Sanitize error message and inject into page
     * @param  {Error} err - an error object
     */

    Server.prototype.show_error = function(err) {
      var cleanError;
      if (err instanceof Error) {
        err = err.toString();
      }
      cleanError = err.replace ? err.replace(/(\r\n|\n|\r)/gm, '<br>') : "compile error!";
      return this.bs.notify(cleanError, 999999);
    };

    return Server;

  })();

  module.exports = Server;

}).call(this);
