// Generated by CoffeeScript 1.10.0
(function() {
  var Config, EventEmitter, Extensions, Roots, fs, path,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  require('./analytics');

  EventEmitter = require('events').EventEmitter;

  fs = require('fs');

  path = require('path');

  Config = require('./config');

  Extensions = require('./extensions');


  /**
   * @class
   * @classdesc main roots class, public api for roots
   */

  Roots = (function(superClass) {
    extend(Roots, superClass);


    /**
     * Given a path to a project, set up the config and return a roots instance
     * @param  {[type]} root - path to a folder
     * @return {Function} - instance of the Roots class
     */

    function Roots(root, opts1) {
      this.root = root;
      this.opts = opts1 != null ? opts1 : {};
      this.root = path.resolve(this.root);
      if (!fs.existsSync(this.root)) {
        throw new Error("path does not exist");
      }
      this.extensions = new Extensions(this);
      this.config = new Config(this, this.opts);
    }


    /**
     * Alternate constructor, creates a new roots project in a given folder and
     * returns a roots instance for this project. Takes an object with these keys:
     *
     * path: path to the folder you'd like to create and initialize a project in
     * template: name of the template you'd like to use (default: base)
     * overrides: data to pass to the template, skips prompts
     * defaults: sets default values for the template's prompts
     *
     * @param  {Object} opts - options object, described above
     * @return {Promise} Promise for a Roots class instance
     */

    Roots["new"] = function(opts) {
      var New;
      New = require('./api/new');
      return (new New(this)).exec(opts);
    };


    /**
     * Exposes an API to manage your roots project templates through sprout.
     * See api/template for details. The defineGetter hack makes it such that
     * while you can call roots.template.x like an object, the dependencies
     * needed for it are lazy-loaded only when you actually make the call.
     * This boosts the require time of this file by ~400ms.
     */

    Roots.__defineGetter__('template', function() {
      return require('./api/template');
    });


    /**
     * Compiles a roots project. Wow.
     *
     * @return {Promise} promise for finished compile
     */

    Roots.prototype.compile = function(opts) {
      var Compile;
      Compile = require('./api/compile');
      return (new Compile(this)).exec(opts);
    };


    /**
     * Watches a folder for changes and compiles whenever changes happen.
     *
     * @return {Object} [chokidar](https://github.com/paulmillr/chokidar) instance
     */

    Roots.prototype.watch = function() {
      var Watch;
      Watch = require('./api/watch');
      return (new Watch(this)).exec();
    };


    /**
     * Removes a project's output folder.
     * @return {Promise} promise for removed output folder
     */

    Roots.prototype.clean = function() {
      var Clean;
      Clean = require('./api/clean');
      return (new Clean(this)).exec();
    };


    /**
     * If an irrecoverable error has occurred, exit the application with
     * as clear an error as possible and a specific exit code.
     *
     * @param {Integer} code - numeric error code
     * @param {String} details - any additional details to be printed
     */

    Roots.prototype.bail = require('./api/bail');

    return Roots;

  })(EventEmitter);

  Roots.analytics = function(args) {
    var analytics;
    analytics = require('./api/analytics');
    return analytics(args);
  };

  module.exports = Roots;

}).call(this);
