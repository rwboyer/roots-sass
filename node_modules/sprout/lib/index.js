'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _template = require('./template');

var _template2 = _interopRequireDefault(_template);

var _events = require('events');

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _api = require('./api');

var _api2 = _interopRequireDefault(_api);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/*
 * Given a base path, returns a Sprout instance.
 * @param {String} basePath - Path to directory containing Sprout templates.
 * @return {Function} - Sprout instance.
 */

var Sprout = function (_EventEmitter) {
  _inherits(Sprout, _EventEmitter);

  function Sprout(basePath) {
    _classCallCheck(this, Sprout);

    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(Sprout).call(this));

    _this.templates = {};
    _this.path = basePath;

    try {
      _fs2.default.accessSync(_this.path);
    } catch (err) {
      throw new Error(_this.path + ' does not exist');
    }

    if (!_fs2.default.lstatSync(_this.path).isDirectory()) {
      throw new Error(_this.path + ' is not a directory');
    }

    _fs2.default.readdirSync(_this.path).map(function (name) {
      var lstat = _fs2.default.lstatSync(_path2.default.join(_this.path, name));
      if (lstat.isDirectory() || lstat.isSymbolicLink()) {
        _this.templates[name] = new _template2.default({ sprout: _this, name: name });
      }
    });
    return _this;
  }

  /*
   * Create a new template.
   * @param {String} name - name to save template as.
   * @param {String} src - path or URL to template source.
   * @return {Promise} - Promise for Sprout instance.
   */


  _createClass(Sprout, [{
    key: 'add',
    value: function add(name, src) {
      return _api2.default.add(this, name, src).yield(this);
    }

    /*
     * Remove a template.
     * @param {String} name - name of template to remove.
     * @return {Promise} - Promise for Sprout instance.
     */

  }, {
    key: 'remove',
    value: function remove(name) {
      return _api2.default.remove(this, name).yield(this);
    }

    /*
     * Initialize an existing template at a
     * given target path.
     * @param {String} name - name of template to initialize.
     * @param {String} target - The path to save the template to.
     * @param {Object} options - Initialization options.
     * @return {Promise} - Promise for Sprout instance.
     */

  }, {
    key: 'init',
    value: function init(name, target, options) {
      return _api2.default.init(this, name, target, options).yield(this);
    }

    /*
     * Run a generator in an existing template
     * given the target path and generator name.
     * @param {String} name - name of template to run generator from.
     * @param {String} target - The path of the existing instance.
     * @param {String} generator - The generator to use.
     * @param {Array} args - An array of arguments to pass to the generator.
     * @return {Promise} - Promise for Sprout instance.
     */

  }, {
    key: 'run',
    value: function run(name, target, generator, args) {
      return _api2.default.run(this, name, target, generator, args).yield(this);
    }
  }]);

  return Sprout;
}(_events.EventEmitter);

module.exports = Sprout;