'use strict';

var _when = require('when');

var _when2 = _interopRequireDefault(_when);

var _node = require('when/node');

var _node2 = _interopRequireDefault(_node);

var _ejs = require('ejs');

var _ejs2 = _interopRequireDefault(_ejs);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _underscore = require('underscore.string');

var _underscore2 = _interopRequireDefault(_underscore);

var _fs2 = require('fs');

var _fs3 = _interopRequireDefault(_fs2);

var _mkdirp2 = require('mkdirp');

var _mkdirp3 = _interopRequireDefault(_mkdirp2);

var _child_process = require('child_process');

var _ncp2 = require('ncp');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var fs = _node2.default.liftAll(_fs3.default, function (pfs, lifted, name) {
  pfs[name + 'Async'] = lifted;
  return pfs;
});
var exec = _node2.default.lift(_child_process.exec);
var ncp = _node2.default.lift(_ncp2.ncp);
var mkdirp = _node2.default.lift(_mkdirp3.default);

/*
 * Given a source path and a target path, returns a Utils instance.
 * @param {String} src - The template source path.
 * @param {String} target - The template destination path.
 * @return {Function} - Template instance.
 */
var Utils = function Utils(src, target) {
  /*
   * Copy a file from one path relative to the src, to another relative to the
   * target.
   * @param {String} from - the path to copy from, relative to the src.
   * @param {String} to - the path to copy to.
   * @return {Promise} - promise to copy
   */
  this.copy = function (from, to) {
    return _copy(_path2.default.resolve(src, from), _path2.default.resolve(target, to));
  };

  this.src = {
    /*
     * The source path.
     */
    path: _lodash2.default.clone(src),

    /*
     * Read a file, relative to the source.
     * @param {String} from - the path to read from, relative to the source.
     * @return {Promise} - a promise to return the file's content.
     */
    read: function read(from) {
      return _read(_path2.default.resolve(src, from));
    }

  };

  this.target = {
    /*
     * The target path.
     */
    path: _lodash2.default.clone(target),

    /*
     * Copy a file from one path to another, relative to the target.
     * @param {String} from - the path to copy from, relative to the target.
     * @param {String} to - the path to copy to relative to the target.
     * @return {Promise} - promise to copy
     */
    copy: function copy(from, to) {
      return _copy(_path2.default.resolve(target, from), _path2.default.resolve(target, to));
    },

    /*
     * Read a file, relative to the target.
     * @param {String} from - the path to read from, relative to the target.
     * @return {Promise} - a promise to return the file's content.
     */
    read: function read(from) {
      return _read(_path2.default.resolve(target, from));
    },

    /*
     * Write a file to a path, optionally with ejs locals, relative to the
     * target.
     * @param {String} to - the path to write to, relative to the target.
     * @param {String} what - the content to write, relative to the target.
     * @param {Object} locals - object to pass as locals to ejs.
     * @return {String} - the contents of the file.
     */

    write: function write(to, what, locals) {
      return _write(_path2.default.resolve(target, to), what, locals);
    },

    /*
     * Rename a file, relative to the target.
     * @param {String} from - the path to the file, relative to the target.
     * @param {String} to - the new path to the file, relative to the target.
     * @return {Promise} - a promise to rename the file.
     */

    rename: function rename(from, to) {
      return _rename(_path2.default.resolve(target, from), _path2.default.resolve(target, to));
    },

    /*
     * Remove files, relative to the target.
     * @param {String[]} what - the path(s) to read from, relative to the target.
     * @return {Promise} -  a promise to remove the file
     */
    remove: function remove(what) {
      return _remove(target, what);
    },

    /*
     * Execute a child process at the specified working directory, relative to
     * the target.
     * @param {String} cmd - the command to run.
     * @param {string} cwd - the working directory, relative to the target
     * @return {Promise} - a promise for the standard out.
     */
    exec: function exec(cmd, cwd) {
      return execute(cmd, cwd ? _path2.default.resolve(target, cwd) : target);
    }
  };
};

/*
 * Copy a file from one path to another.
 * @param {String} from - the path to copy from.
 * @param {String} to - the path to copy to.
 * @return {Promise} - promise to copy
 */
function _copy(from, to) {
  return ncp(from, to);
}

/*
 * Read a file.
 * @param {String} from - the path to read from.
 * @return {Promise} - a promise to return the file's content.
 */
function _read(from) {
  return fs.readFileAsync(from, 'utf8');
}

/*
 * Write a file to a path, optionally with ejs locals.
 * @param {String} to - the path to write to.
 * @param {String} what - the content to write.
 * @param {Object} locals - object to pass as locals to ejs.
 * @return {String} - the contents of the file.
 */
function _write(to, what, locals) {
  var content = _ejs2.default.render(what, _lodash2.default.extend({}, locals || {}, { S: _underscore2.default }));
  return mkdirp(_path2.default.dirname(to)).then(function () {
    return fs.writeFileAsync(to, content, 'utf8');
  });
}

/*
 * Rename a file.
 * @param {String} from - the path to the file.
 * @param {String} to - the new path to the file.
 * @return {Promise} - a promise to rename the file.
 */
function _rename(from, to) {
  return fs.renameAsync(from, to);
}

/*
 * Remove files.
 * @param {String} from - base path to resolve.
 * @param {String[]} what - the path(s) to remove.
 * @return {Promise} -  a promise to remove the file
 */
function _remove(from, what) {
  // TODO array coerce trick
  if (!_lodash2.default.isArray(what)) {
    what = [what];
  }
  return _when2.default.map(what, function (p) {
    return fs.unlinkSync(_path2.default.resolve(from, p));
  });
}

/*
 * Execute a child process at the specified working directory.
 * @param {String} cmd - the command to run.
 * @param {string} cwd - the working directory
 * @return {Promise} - a promise for the standard out.
 */
function execute(cmd, cwd) {
  return exec(cmd, { cwd: cwd });
}

module.exports = Utils;